'use strict';

{{
  var STRIP_FUNCTION = /function\s+anonymous\s*\(it[^)]*\)\s*{|return\s+out;\s*}/g
    , VAR_OUT = /var\s+out/
    , OUT_EMPTY_STRING = /out\s*\+=\s*\'\'\s*\+\s*/g;
}}

{{ var name = 'localize_' + it.locale.replace('-','_'); }}
function {{=name}}(errors) {
  if (!(errors && errors.length)) return;
  for (var i=0; i<errors.length; i++) {
    var e = errors[i];
    var out;
    switch (e.keyword) {
      {{~ it.messages:msg }}
        case '{{= msg.keyword }}':
          {{= stripFunction(msg.msgFunc) }}
          break;
      {{~}}
      default: continue;
    }
    e.message = out;
  }
};

function makeLocalizedErrors(ajv) {
  return {
    get: function() {
      return ajv._errors;
    },
    set: function(errors) {
      ajv._errors = {{=name}}(errors);
    },
    configurable: true
  };
}

function initialize(ajv) {
  ajv._compile = ajv.compile;

  ajv.compile = schema => {
    const validate = ajv._compile(schema);
    Object.defineProperty(validate, 'errors', makeLocalizedErrors(ajv));
    return validate;
  }
}

initialize.localize = {{=name}};
module.exports = initialize;

{{
  function stripFunction(code) {
    return code.toString()
            .replace(STRIP_FUNCTION, '')
            .replace(VAR_OUT, 'out')
            .replace(OUT_EMPTY_STRING, 'out += ');
  }
}}
